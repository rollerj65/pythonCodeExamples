
#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#Let us list the factors of the first seven triangle numbers:
#     1: 1
#     3: 1,3
#     6: 1,2,3,6
#    10: 1,2,5,10
#    15: 1,3,5,15
#    21: 1,3,7,21
#    28: 1,2,4,7,14,28
#We can see that 28 is the first triangle number to have over five divisors.
#What is the value of the first triangle number to have over five hundred divisors?

naturalNumbers = []
triangleNumbers = []

divisorList = []
divisorLimit = 500
limitReached = False

factors = []
triangleNumber = 0


for naturalNumber in range (1, 5000):# counter
    for x in range (1, naturalNumber):# calculate triangle number x
        triangleNumber += x
    triangleNumbers.append(triangleNumber)#add triangle number to list
    triangleNumber = 0

#print(triangleNumbers)

for x in triangleNumbers: #for every triangle number x in list
    for y in range(1, x): #for every natural number y below triangle number x
        if (x % y == 0): #check if y is a divisor
            divisorList.append(y) #if y is a divisor, then add to divisor list
    #print("triangleNumber: %s, divisorList: %s" % (x,divisorList) )
    if(len(divisorList) == divisorLimit):
        print("first divisor with %s divisors: %s" % (divisorLimit, x))
        limitReached = True
        break
    divisorList.clear()